---
import { Image } from "astro:assets";
import Share from "@/components/Share.astro";
import SimilarPosts from "@/components/SimilarPosts.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import dateFormat from "@/lib/utils/dateFormat";
import similerItems from "@/lib/utils/similarItems";
import { humanize, markdownify, slugify } from "@/lib/utils/textConverter";
import { BiCalendarEdit, BiCategoryAlt } from "react-icons/bi";
import TableOfContents from "./components/TableOfContents.astro";

const allAuthors = await getSinglePage("authors");
const posts = await getSinglePage("posts");
const { post } = Astro.props;
const { headings } = Astro.props;
const similarPosts = similerItems(post, posts, post.slug);
const { Content } = await post.render();
const { title, description, authors, categories, image, date, tags } =
  post.data;
---

<section
  class="px-5 sm:mx-auto sm:max-w-2xl sm:px-8 lg:px-0 antialiased md:max-w-6xl grid gap-12 mt-4 overflow-hidden md:overflow-visible"
>
  <article class="min-w-full md:py-4 sm:max-w-none md:max-w-none">
    <header class="mb-3 flex flex-col justify-center items-center gap-6">
      <div class="flex flex-col gap-2">
        <h1
          set:html={markdownify(title)}
          class="text-center text-4xl md:text-6xl md:pb-2.5 font-semibold"
        />
        <ul
          class="flex flex-wrap justify-center items-center gap-2 gap-y-4 md:gap-5"
        >
          <li class="mx-3 flex items-center flex-wrap font-medium">
            <BiCalendarEdit className="mr-1 h-5 w-5 text-gray-600" />
            <>{dateFormat(date)}</>
          </li>
          <li class="mx-3 flex items-center flex-wrap">
            <BiCategoryAlt className="mr-1 h-[18px] w-[18px] text-gray-600" />
            <>
              <ul>
                {
                  categories.map((category: string, i: number) => (
                    <li class="inline-block">
                      <a
                  href={`/blog/categories/${slugify(category)}`}
                        class="mr-2 hover:text-primary font-medium"
                      >
                        {humanize(category)}
                        {i !== post.data.categories.length - 1 && ","}
                      </a>
                    </li>
                  ))
                }
              </ul>
            </>
          </li>
        </ul>
      </div>
    </header>
    <div class="col-12 mt-8 mb-2">
      {
        image && (
          <Image
            src={image}
            alt={title}
            width={1000}
            height={500}
            quality={100}
            format="jpg"
            loading="eager"
            class="rounded-md w-full max-h-[300px]  md:max-h-[500px] my-8 object-cover"
          />
        )
      }
    </div>
    <div>
      <!-- <div class="content mb-16 text-left">
        <Content />
      </div> -->
      <div class="grid grid-cols-1 md:grid-cols-[20%_auto] gap-10 mt-8">

        <aside class="md:flex flex-col gap-8 hidden">
          <div
            class="sticky top-24 self-start hidden md:block transition-all duration-200"
          >
            {headings && headings.length > 0 && <TableOfContents {headings} />}
          </div>
        </aside>
        <article class="max-w-full w-full">
          <div class="prose prose-lg md:prose-xl mb-12 min-w-full">
            <Content />
          </div>
        </article>
      </div>
    </div>
    <div class="flex flex-wrap items-center justify-between">
      <ul class="mr-4 mb-4 space-x-3">
        {
          tags.map((tag: string) => (
            <li class="inline-block">
              <a
            href={`/blog/tags/${slugify(tag)}`}
                class="block rounded-lg bg-theme-light px-4 py-2 font-semibold text-dark text-sm hover:text-primary transition duration-300"
              >
                #{humanize(tag)}
              </a>
            </li>
          ))
        }
      </ul>
      <Share
        className="social-share mb-4"
        title={title}
        description={description}
        slug={post.slug}
      />
    </div>
  </article>
</section>

<!-- similar posts -->
{
  similarPosts.length > 0 && (
    <section class="section pt-0">
      <div class="container">
        <h2 class="mb-8 text-center h3">Similar Posts</h2>
        <SimilarPosts posts={similarPosts.slice(0, 3)} />
      </div>
    </section>
  )
}
<script>
  const fnObserver = () => {
    function handleIntersection(
      entries: IntersectionObserverEntry[],
      observer: IntersectionObserver,
    ) {
      entries.forEach((entry) => {
        const index = document.querySelector(
          `aside a[href="#${entry.target.id}"]`,
        );

        if (entry.isIntersecting) {
          index?.classList.add(
            "bg-blue-100",
            "bg-blue-100",
            "font-bold",
            "transition-colors",
            "duration-100",
          );
        } else {
          index?.classList.remove(
            "bg-blue-100",
            "bg-blue-100",
            "font-bold",
            "transition-colors",
            "duration-100",
          );
        }
      });
    }

    const headings = document.querySelectorAll(
      "div.prose h1, div.prose h2, div.prose h3, div.prose h4, div.prose h5, div.prose h6",
    );

    const options = {
      root: null,
      rootMargin: " 15% 0px 0% 0px ",
      threshold: 1,
    };

    const observer = new IntersectionObserver(handleIntersection, options);

    headings.forEach((heading) => {
      observer.observe(heading);
    });
  };

  fnObserver();
  document.addEventListener("astro:after-swap", fnObserver);
</script>
<style>
  body {
    margin-left: calc(100vw - 100%); /* prevent layout shift */
  }
  :root {
    scroll-behavior: smooth;
  }
</style>
